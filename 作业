// true game.cpp : 定义应用程序的入口点。

//



#include "framework.h"

#include "true game.h"

#include<Windows.h>

#include<stdio.h>

#define MAX_LOADSTRING 100                   

int x =0, y = 0;

// 全局变量:

HINSTANCE hInst;                                // 当前实例

WCHAR szTitle[MAX_LOADSTRING];                  // 标题栏文本

WCHAR szWindowClass[MAX_LOADSTRING];            // 主窗口类名



// 此代码模块中包含的函数的前向声明:

ATOM                MyRegisterClass(HINSTANCE hInstance);

BOOL                InitInstance(HINSTANCE, int);

LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);

INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

COLORREF color = RGB(0, 0, 255);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,

    _In_opt_ HINSTANCE hPrevInstance,

    _In_ LPWSTR    lpCmdLine,

    _In_ int       nCmdShow)

 

{ 



    color = RGB(0, 0, 255);

    UNREFERENCED_PARAMETER(hPrevInstance);

    UNREFERENCED_PARAMETER(lpCmdLine);



    // TODO: 在此处放置代码。



    // 初始化全局字符串

    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);

    LoadStringW(hInstance, IDC_TRUEGAME, szWindowClass, MAX_LOADSTRING);

    MyRegisterClass(hInstance);



    // 执行应用程序初始化:

    if (!InitInstance (hInstance, nCmdShow))

    {

        return FALSE;

    }



    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_TRUEGAME));



    MSG msg;



    // 主消息循环:

    while (GetMessage(&msg, nullptr, 0, 0))

    {

        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))

        {

            TranslateMessage(&msg);

            DispatchMessage(&msg);

        }

    }



    return (int) msg.wParam;

}
